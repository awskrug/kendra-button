service: scrap

custom:
  stage:  ${opt:stage, 'dev'}
  wsgi:
    app: manage.app
    pythonBin: python3
    packRequirements: false
  kendra:
    account: 294038372338
  dynamodb:
    siteDB: kendra-buttons-site-${self:custom.stage}
    pageDB: kendra-buttons-index-${self:custom.stage}
  sqs:
    pageQueue: kendra-buttons-page-que-${self:custom.stage}
  s3:
    temp: kendra-buttons-temp-store-${self:custom.stage}
  role:
    kendra_role: kendra-buttons-put-doc-role-${self:custom.stage}
    arn: arn:aws:iam::${self:custom.kendra.account}:role/${self:custom.role.kendra_role}
  scrap:
    operator: scrap-${self:custom.stage}-operator
    worker: scrap-${self:custom.stage}-worker
  pythonRequirements:
    dockerizePip: non-linux
    layer:
      compatibleRuntimes:
        - python3.8
  userPoolAuthorizer:
    type: COGNITO_USER_POOLS
    authorizerId:
      Ref: CognitoAuthorizer


provider:
  name: aws
  profile: everypython
  runtime: python3.8
  stage: dev
  region: us-west-2
  environment:
    siteDB: ${self:custom.dynamodb.siteDB}
    pageDB: ${self:custom.dynamodb.pageDB}
    SQS: ${self:custom.sqs.pageQueue}
    S3: ${self:custom.s3.temp}
    KENDRA_ROLE: ${self:custom.role.arn}
    PYPPETEER_HOME: '/tmp/'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
        - "sns:*"
        - "dynamodb:*"
        - "sqs:*"
        - "cloudwatch:*"
        - "events:*"
      Resource:
        - "*"

package:
  exclude:
    - .venv/**
    - venv
    - node_modules/**
  include:
    - bin/**
    - manage.py
    - parser/**
    - page.py
    - scraper.py
    - kendra.py
    - kendra_site.py
    - schema.py
    - utils.py
    - __init__.py

functions:
  graphql:
    memorySize: 512
    handler: wsgi_handler.handler
    timeout: 30
    events:
      - http: ANY /
        cors: true
        authorizer: 
          type: COGNITO_USER_POOLS
          authorizerId: 
            Ref: CognitoAuthorizer
      - http: 'ANY /noauth/{proxy+}'
        cors: true
      - http: 'ANY {proxy+}'
        cors: true
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId: 
            Ref: CognitoAuthorizer
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
  operator:
    name: ${self:custom.scrap.operator}
    memorySize: 128
    handler: scraper.operator
    timeout: 300
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - PageIndexTable
              - StreamArn
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    package: {}
  worker:
    name: ${self:custom.scrap.worker}
    handler: scraper.worker
    memorySize: 512
    timeout: 30
    reservedConcurrency: 2
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PageQueue
              - Arn
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    package: {}
plugins:
  - serverless-python-requirements
  - serverless-wsgi
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    SiteTable: 
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "user"
            AttributeType: "S"
          - AttributeName: "site"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "user"
            KeyType: "HASH"
          -
            AttributeName: "site"
            KeyType: "RANGE"
        TableName: "${self:custom.dynamodb.siteDB}"
    PageIndexTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "site"
            AttributeType: "S"
          - AttributeName: "url"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "site"
            KeyType: "HASH"
          - 
            AttributeName: "url"
            KeyType: "RANGE"
        TableName: "${self:custom.dynamodb.pageDB}"
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: KendraCongnitoAuth
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs: 
          - arn:aws:cognito-idp:us-west-2:213888382832:userpool/us-west-2_XT1s3RtPp
        IdentitySource: method.request.header.Authorization
    PageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "${self:custom.sqs.pageQueue}"
    TempBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: "${self:custom.s3.temp}"
        LifecycleConfiguration:
          Rules:
            - Id: tempRule
              Status: Enabled
              ExpirationInDays: '3'
